{"mappings":"YAAO,MAAMA,EAAkB,CAACC,EAAYC,KAE1C,MAAMC,EAAgBD,EACnBE,cACAC,MAAM,IACNC,QAAO,CAACC,EAAeC,KACtB,MAAMC,EAAeF,EAAcC,IAAqB,EACxD,MAAO,IAAKD,EAAeC,CAACA,GAAmBC,EAAe,EAAE,GAC/D,CAAC,GAEN,OAAOR,EACJS,QACEC,GACC,IAAIA,GAAMC,OAAOC,GAAcV,EAAcU,QAAiBF,IAEjEG,MAAK,CAACC,EAAGC,IAAMA,EAAEC,OAASF,EAAEE,QAAM,EAI1BC,EAAgBC,MAAOC,IAClC,IACEC,SAASC,cAAc,QAAQC,MAAMC,QAAU,OAC/C,MAAMC,EAAUJ,SAASK,cAAc,OACvCD,EAAQE,UAAUC,IAAI,WACtBH,EAAQI,UAAY,8BACpBR,SAASS,KAAKC,YAAYN,GAE1B,MAAMO,QAAiBC,MAAMb,GAE7B,aADmBY,EAASE,MAI9B,CAFE,MAAOC,GACPC,QAAQC,IAAIF,EACd,GAeWG,EAAsBrC,GAC1BA,EAAWsC,KAAKC,MAAMD,KAAKE,SAAWxC,EAAWgB,SAG7CyB,EAA4BC,IACvC,MAAMC,EAAiB,IAAID,GAAQE,eAAeC,GAAUA,EAAMC,QAClE,OAAQC,kBAAsC,IAAnBJ,EAAwBA,EAAiB,CAAC,GC7CtE,iBAEC,MAAMK,EAAkB5B,SAAS6B,iBAAiB,SAC5CC,EAAW9B,SAASC,cAAc,aAClC8B,EAAqB/B,SAASC,cAAc,oBAC5C+B,EAAYhC,SAASC,cAAc,eACnCgC,EAAWjC,SAASC,cAAc,cAClCiC,EAAYlC,SAASC,cAAc,eAMnCrB,SAJaiB,EACjB,iFAGuBsC,MAAMnD,MAAM,KAEhCJ,GAAYgB,QAKjBI,SAASS,KAAK2B,YAAYpC,SAASC,cAAc,aACjDD,SAASC,cAAc,QAAQC,MAAMC,QAAU,QAG/CyB,EAAgBS,SAASC,GACvBA,EAAKC,iBAAiB,SAAS,KAC7B,MAAMZ,EAAmBN,EAAyBO,GAClDA,EACED,IAAqBC,EAAgBhC,OAAS,EAC1C+B,EAAmB,EACnBC,EAAgBhC,OAAS,GAC7B4C,OAAK,MAIXxC,SAASuC,iBAAiB,WAAYE,IACpC,GAAc,cAAVA,EAAEC,IAAqB,CACzB,MAAMf,EAAmBN,EAAyBO,GAClDA,EAAgBD,GAAkBD,MAAQ,GAC1CE,EAAgBD,GAAkBa,OACpC,KAGFN,EAAUK,iBAAiB,SAAS,KAElCX,EAAgBS,SAASM,IACvBA,EAAKjB,MAAQT,EAFI,iCAEe,GAClC,IAGFgB,EAASM,iBAAiB,SAAS,KACjCX,EAAgBS,SAASM,IACvBA,EAAKjB,MAAQ,MAEfI,EAASJ,MAAQ,GACjBK,EAAmBzB,UAAUsC,OAAO,aAGtCZ,EAAUO,iBAAiB,SAAUE,IACnCA,EAAEI,iBACF,MAAMC,GD5BeC,EC4BSnB,ED3BzB,IAAImB,GAAK9D,QACd,CAAC+D,EAAKC,IAAUA,EAAKvB,MAAQsB,EAAMC,EAAKvB,MAAQsB,GAChD,KAHoB,IAACD,EC6BrB,MAAMG,EAAUvE,EAAgBC,EAAYkE,GAE5C,IAAKI,EAAQtD,OAIX,OAHAkC,EAASJ,MAAQ,GACjBK,EAAmBzB,UAAUsC,OAAO,eACpCO,MAAM,8BAIRrB,EAASJ,MAAQwB,EAAQ,GAEzB,MAAME,EAAiB,IAAIF,GACxBG,OAAO,EAAG,GACVpE,QACC,CAACqE,EAAcxB,IAAawB,EAAe,OAAOxB,UAClD,IAGJC,EAAmBzB,UAAUC,IAAI,UACjCwB,EAAmB9B,cAAc,MAAMO,UAAY4C,CAAA,KAhEnDpD,SAASS,KAAKD,UAAY,wEAkE9B,CAlFC,E","sources":["src/utils.js","src/app.js"],"sourcesContent":["export const findLongestWord = (dictionary, randomStr) => {\r\n  // create characters map that contains number of occurences for each character from the random string\r\n  const charactersMap = randomStr\r\n    .toLowerCase()\r\n    .split(\"\")\r\n    .reduce((allCharacters, currentCharacter) => {\r\n      const currentCount = allCharacters[currentCharacter] ?? 0;\r\n      return { ...allCharacters, [currentCharacter]: currentCount + 1 };\r\n    }, {});\r\n\r\n  return dictionary\r\n    .filter(\r\n      (word) =>\r\n        [...word].every((character) => charactersMap[character]--) && word\r\n    )\r\n    .sort((a, b) => b.length - a.length);\r\n};\r\n\r\n// fetch json\r\nexport const getDictionary = async (url) => {\r\n  try {\r\n    document.querySelector(\"main\").style.display = \"none\";\r\n    const loading = document.createElement(\"div\");\r\n    loading.classList.add(\"loading\");\r\n    loading.innerHTML = `<h1>Учитавам речник...</h1>`;\r\n    document.body.appendChild(loading);\r\n\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Get characters from all input fields.\r\n * @param {object} obj = node list.\r\n * @returns {string}\r\n */\r\nexport const getChars = (obj) => {\r\n  return [...obj].reduce(\r\n    (acc, curr) => (curr.value ? acc + curr.value : acc),\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport const generateRandomChar = (dictionary) => {\r\n  return dictionary[Math.floor(Math.random() * dictionary.length)];\r\n};\r\n\r\nexport const getLastInputElementIndex = (inputs) => {\r\n  const lastInputIndex = [...inputs].findLastIndex((input) => input.value);\r\n  return (lastElementIndex = lastInputIndex !== -1 ? lastInputIndex : 0);\r\n};\r\n","import {\r\n  findLongestWord,\r\n  generateRandomChar,\r\n  getChars,\r\n  getDictionary,\r\n  getLastInputElementIndex,\r\n} from \"./utils\";\r\n\r\n(async function () {\r\n  // ---------- VARIABLES ----------\r\n  const inputCharacters = document.querySelectorAll(\".char\");\r\n  const solution = document.querySelector(\".solution\");\r\n  const otherSolutionsList = document.querySelector(\".other-solutions\");\r\n  const searchBtn = document.querySelector(\".search-btn\");\r\n  const resetBtn = document.querySelector(\".reset-btn\");\r\n  const randomBtn = document.querySelector(\".random-btn\");\r\n\r\n  const data = await getDictionary(\r\n    \"https://raw.githubusercontent.com/bbtools-ps/slagalica/main/dict/sr-rs.json\"\r\n  );\r\n\r\n  const dictionary = data?.words.split(\" \");\r\n\r\n  if (!dictionary?.length) {\r\n    document.body.innerHTML = `<div class=\"loading\"><h1>Грешка приликом учитавања речника!</h1></div>`;\r\n    return;\r\n  }\r\n\r\n  document.body.removeChild(document.querySelector(\".loading\"));\r\n  document.querySelector(\"main\").style.display = \"block\";\r\n\r\n  // ---------- EVENT LISTENERS ----------\r\n  inputCharacters.forEach((item) =>\r\n    item.addEventListener(\"input\", () => {\r\n      const lastElementIndex = getLastInputElementIndex(inputCharacters);\r\n      inputCharacters[\r\n        lastElementIndex !== inputCharacters.length - 1\r\n          ? lastElementIndex + 1\r\n          : inputCharacters.length - 1\r\n      ].focus();\r\n    })\r\n  );\r\n\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    if (e.key === \"Backspace\") {\r\n      const lastElementIndex = getLastInputElementIndex(inputCharacters);\r\n      inputCharacters[lastElementIndex].value = \"\";\r\n      inputCharacters[lastElementIndex].focus();\r\n    }\r\n  });\r\n\r\n  randomBtn.addEventListener(\"click\", () => {\r\n    const dictionary = \"абвгдђежзијклљмнњопрстћуфхцчџш\";\r\n    inputCharacters.forEach((char) => {\r\n      char.value = generateRandomChar(dictionary);\r\n    });\r\n  });\r\n\r\n  resetBtn.addEventListener(\"click\", () => {\r\n    inputCharacters.forEach((char) => {\r\n      char.value = \"\";\r\n    });\r\n    solution.value = \"\";\r\n    otherSolutionsList.classList.remove(\"active\");\r\n  });\r\n\r\n  searchBtn.addEventListener(\"click\", (e) => {\r\n    e.preventDefault();\r\n    const randomString = getChars(inputCharacters);\r\n    const results = findLongestWord(dictionary, randomString);\r\n\r\n    if (!results.length) {\r\n      solution.value = \"\";\r\n      otherSolutionsList.classList.remove(\"active\");\r\n      alert(\"Нема такве речи у речнику.\");\r\n      return;\r\n    }\r\n\r\n    solution.value = results[0];\r\n\r\n    const otherSolutions = [...results]\r\n      .splice(1, 5)\r\n      .reduce(\r\n        (allSolutions, solution) => allSolutions + `<li>${solution}</li>`,\r\n        \"\"\r\n      );\r\n\r\n    otherSolutionsList.classList.add(\"active\");\r\n    otherSolutionsList.querySelector(\"ul\").innerHTML = otherSolutions;\r\n  });\r\n})();\r\n"],"names":["$f6745ab07405201d$export$32bc6f7cf859b3c2","dictionary","randomStr","charactersMap","toLowerCase","split","reduce","allCharacters","currentCharacter","currentCount","filter","word","every","character","sort","a","b","length","$f6745ab07405201d$export$475a61335fef548c","async","url","document","querySelector","style","display","loading","createElement","classList","add","innerHTML","body","appendChild","response","fetch","json","error","console","log","$f6745ab07405201d$export$6fefcd12824469d6","Math","floor","random","$f6745ab07405201d$export$34924e35dfb3a0a9","inputs","lastInputIndex","findLastIndex","input","value","lastElementIndex","inputCharacters","querySelectorAll","solution","otherSolutionsList","searchBtn","resetBtn","randomBtn","words","removeChild","forEach","item","addEventListener","focus","e","key","char","remove","preventDefault","randomString","obj","acc","curr","results","alert","otherSolutions","splice","allSolutions"],"version":3,"file":"index.4b231af5.js.map"}